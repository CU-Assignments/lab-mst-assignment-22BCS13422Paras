1. 

 The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.

You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.

For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.

Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.



 Hint:

Input: nums1 = [4,1,2], nums2 = [1,3,4,2]

Output: [-1,3,-1]

Explanation: The next greater element for each value of nums1 is as follows:

- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.

- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.

- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.



import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

public class NextGreaterElement {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        // Map to store the next greater element for each element in nums2
        Map<Integer, Integer> nextGreaterMap = new HashMap<>();
        Stack<Integer> stack = new Stack<>();

        // Iterate through nums2 to fill the nextGreaterMap
        for (int num : nums2) {
            // While stack is not empty and the current number is greater than the number at the top of the stack
            while (!stack.isEmpty() && num > stack.peek()) {
                nextGreaterMap.put(stack.pop(), num);
            }
            // Push the current number onto the stack
            stack.push(num);
        }

        // For any remaining elements in the stack, there is no next greater element
        while (!stack.isEmpty()) {
            nextGreaterMap.put(stack.pop(), -1);
        }

        // Build the result for nums1 using the nextGreaterMap
        int[] result = new int[nums1.length];
        for (int i = 0; i < nums1.length; i++) {
            result[i] = nextGreaterMap.get(nums1[i]);
        }

        return result;
    }

    public static void main(String[] args) {
        NextGreaterElement solution = new NextGreaterElement();
        int[] nums1 = {4, 1, 2};
        int[] nums2 = {1, 3, 4, 2};
        int[] output = solution.nextGreaterElement(nums1, nums2);

        // Print the output
        for (int num : output) {
            System.out.print(num + " ");
        }
        // Output: -1 3 -1
    }
}

2. Develop a Java program showcasing the concept of inheritance. Create a base class and a derived class with appropriate methods and fields.


// Base class
class Animal {
    // Fields
    private String name;
    private int age;

    // Constructor
    public Animal(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // Method to display animal details
    public void displayInfo() {
        System.out.println("Animal Name: " + name);
        System.out.println("Animal Age: " + age);
    }

    // Method to make sound
    public void makeSound() {
        System.out.println(name + " makes a sound.");
    }
}

// Derived class
class Dog extends Animal {
    // Additional field specific to Dog
    private String breed;

    // Constructor
    public Dog(String name, int age, String breed) {
        // Call the constructor of the base class
        super(name, age);
        this.breed = breed;
    }

    // Overriding the makeSound method
    @Override
    public void makeSound() {
        System.out.println(super.name + " barks.");
    }

    // Method to display dog details
    public void displayDogInfo() {
        // Call the displayInfo method from the base class
        super.displayInfo();
        System.out.println("Dog Breed: " + breed);
    }
}

// Main class to test the inheritance
public class InheritanceExample {
    public static void main(String[] args) {
        // Create an instance of Dog
        Dog myDog = new Dog("Buddy", 3, "Golden Retriever");

        // Display dog information
        myDog.displayDogInfo();

        // Make the dog sound
        myDog.makeSound();
    }
}

3.  Implement a Java program that uses method overloading to perform different mathematical operations.


public class MathOperations {

    // Method to add two integers
    public int add(int a, int b) {
        return a + b;
    }

    // Method to add three integers
    public int add(int a, int b, int c) {
        return a + b + c;
    }

    // Method to add two double values
    public double add(double a, double b) {
        return a + b;
    }

    // Method to subtract two integers
    public int subtract(int a, int b) {
        return a - b;
    }

    // Method to multiply two integers
    public int multiply(int a, int b) {
        return a * b;
    }

    // Method to divide two integers
    public double divide(int a, int b) {
        if (b == 0) {
            throw new ArithmeticException("Division by zero is not allowed.");
        }
        return (double) a / b;
    }

    // Main method to test the overloaded methods
    public static void main(String[] args) {
        MathOperations mathOps = new MathOperations();

        // Testing addition
        System.out.println("Addition of 5 and 10: " + mathOps.add(5, 10));
        System.out.println("Addition of 5, 10, and 15: " + mathOps.add(5, 10, 15));
        System.out.println("Addition of 5.5 and 10.5: " + mathOps.add(5.5, 10.5));

        // Testing subtraction
        System.out.println("Subtraction of 10 from 20: " + mathOps.subtract(20, 10));

        // Testing multiplication
        System.out.println("Multiplication of 5 and 4: " + mathOps.multiply(5, 4));

        // Testing division
        System.out.println("Division of 20 by 4: " + mathOps.divide(20, 4));
        
        // Uncommenting the following line will throw an exception
        // System.out.println("Division of 20 by 0: " + mathOps.divide(20, 0));
    }
}

4. Define an interface in Java and create a class that implements it, demonstrating the concept of abstraction.

// Define the Shape interface
interface Shape {
    // Method to calculate the area of the shape
    double area();

    // Method to calculate the perimeter of the shape
    double perimeter();
}

// Class that implements the Shape interface
class Circle implements Shape {
    // Field for the radius of the circle
    private double radius;

    // Constructor to initialize the radius
    public Circle(double radius) {
        this.radius = radius;
    }

    // Implement the area method
    @Override
    public double area() {
        return Math.PI * radius * radius; // Area = πr²
    }

    // Implement the perimeter method
    @Override
    public double perimeter() {
        return 2 * Math.PI * radius; // Perimeter = 2πr
    }
}

// Main class to test the interface and implementation
public class AbstractionExample {
    public static void main(String[] args) {
        // Create an instance of Circle
        Shape myCircle = new Circle(5.0);

        // Display the area and perimeter of the circle
        System.out.println("Area of the circle: " + myCircle.area());
        System.out.println("Perimeter of the circle: " + myCircle.perimeter());
    }
}

5.String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

Hint:

Input: s = "abcd", t = "abcde"

Output: "e"
public class FindTheAddedLetter {
    public static char findTheAddedLetter(String s, String t) {
        int result = 0;

        // XOR all characters in s
        for (char c : s.toCharArray()) {
            result ^= c;
        }

        // XOR all characters in t
        for (char c : t.toCharArray()) {
            result ^= c;
        }

        // The result will be the added character
        return (char) result;
    }

    public static void main(String[] args) {
        String s = "abcd";
        String t = "abcde";
        char addedLetter = findTheAddedLetter(s, t);
        System.out.println("The added letter is: " + addedLetter); // Output: e
    }
}
